name: Advanced CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Îß§Ï£º ÏõîÏöîÏùº Ïò§Ï†Ñ 9Ïãú (KST) Ï†ïÍ∏∞ Î≥¥Ïïà Ïä§Ï∫î
    - cron: '0 0 * * 1'

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.11.1'

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # CodecovÏóêÏÑú ÌïÑÏöî
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type check
      run: pnpm typecheck
      
    - name: Lint with error reporting
      run: pnpm lint --format junit --output-file lint-results.xml
      continue-on-error: true
      
    - name: Build
      run: pnpm build
      
    - name: Run tests with coverage
      run: pnpm test:coverage
      env:
        CI: true
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        
    - name: Upload coverage to Coveralls
      if: matrix.node-version == '20.x'
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage/lcov.info
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: |
        echo "üîç Running security audit..."
        pnpm audit --audit-level high --json > audit-results.json || true
        
    - name: Check for high severity vulnerabilities
      run: |
        if pnpm audit --audit-level high; then
          echo "‚úÖ No high severity vulnerabilities found"
        else
          echo "‚ùå High severity vulnerabilities detected"
          echo "Please run 'pnpm audit fix' to resolve issues"
          exit 1
        fi
        
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql-config.yml
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build for analysis
      run: pnpm build
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0
        comment-summary-in-pr: always

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build
      run: pnpm build
      
    - name: Run performance tests
      run: pnpm test:performance
      env:
        CI: true
        
    - name: Comment performance results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('performance-results.json')) {
            const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));
            const comment = `## üöÄ Performance Test Results
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Build Time | ${results.buildTime}ms | ${results.buildTime < 30000 ? '‚úÖ' : '‚ùå'} |
            | Bundle Size | ${results.bundleSize}KB | ${results.bundleSize < 1000 ? '‚úÖ' : '‚ùå'} |
            | Memory Usage | ${results.memoryUsage}MB | ${results.memoryUsage < 100 ? '‚úÖ' : '‚ùå'} |
            
            ${results.buildTime > 30000 || results.bundleSize > 1000 || results.memoryUsage > 100 ? 
              '‚ö†Ô∏è Some performance metrics are above recommended thresholds.' : 
              '‚úÖ All performance metrics are within acceptable ranges.'}`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  build-matrix:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build
      run: pnpm build
      
    - name: Test basic functionality
      run: pnpm test:basic
      
    - name: Upload build artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          apps/*/dist
          packages/*/dist
        retention-days: 7
